// GOが普及した背景
// マルチコアプロセッサの普及
// クラウドインフラストラクチャの使用による何百、何千ものサーバー
// これらにより、複数のプロセッサを導入するアプリケーションは普遍的になった為、インフラストラクチャの拡張性が大幅に向上
// ダイナミックでより多くの容量がある

// つまり、ハードの機能が良くなったので、複数のタスクを『同時並行』でこなせればより効率が上がる

// ❐❐　マルチスレッドの概念　❐❐
// スレッドは基本的に一つのタスクを処理する

// ☆☆☆☆☆☆☆☆☆☆☆☆
// GOはマルチスレッドの同時書き込みを可能に
// それが『go routin』

// また、GOは、保守しやすく、読みやすく、拡張しやすい
// GOのアプリケーションは非常に高速に構築できる
// 起動も非常に速い
// 実行するCPUやRAM等の使用するリソースが少ない（効率的である）
// ☆☆☆☆☆☆☆☆☆☆☆☆




// GOの導入
// 1.goコンパイラが必要
// 2.IDE等の統合環境


// GOのインストール
// https://go.dev/doc/install


// ::::::::::::::::::::::::::
// GOのアプリケーションにする
// Initialize our project or "module"!
//
// [command]
// go mod ini <module path>
//
// 例) go mod init booking-app
// ::::::::::::::::::::::::::


// ❐❐❐　GOで記述されたすべてのコードは、パッケージに属さなければいけない　❐❐❐
// ※パッケージで整理される
//
// パッケージは2種類ある
// 1.アプリケーション全体にわたるパッケージ
// 2.独自のアプリケーションを作成するときのパッケージ



// GOアプリケーションの『最初の行』にパッケージを定義する
// アプリケーションはそのパッケージの一部となる
// GOのパッケージは必ずmainから始まる（初めにmainを通る）
package main






// 「Print」関数は、GOの組み込みパッケージ「fmt」、または「format」に属している。
// ❐❐❐  使用するのには、元のパッケージをインポートする必要がある  ❐❐❐
import (
	"fmt"
)


// GOはどこで実行するか
// コンパイラの開始点の最初の行

// アプリケーションのエントリーポイント
// Goアプリケーションを実行するとき、出発点(エントリーポイント)が必要



// 『main』functionはGO言語におけるentry point
// 呼び出すのには、関数の名前を再度指定する必要がある
func main() {

	// Print関数を使用するのには、「Print」どこから来たかGOに教える必要がある
	// ここでは「fmtパッケージのPrint関数」
	fmt.Println("Welcome to our conference booking application")
	fmt.Println("Get your tickets here to attend")




	// ::::  Variable  ::::
	//
	// 「var」キーワードで変数を宣言することができる
	// 以下では、変数「name」から値を参照できるようになった
	// 変数名の命名は具体的で、明確にする（ここではキャメルケース）
	var conferenceName = "Go Conference"


	// GO特有の文化
	// 変数を定義するとき、または特定の値を持つ変数を作成した際に、その『変数が使用されていない』というエラーが発生する。
	// ❐❐❐ パッケージも同様に、使用されていないパッケージが宣言されているとエラーが発生する　❐❐❐


	fmt.Println(conferenceName)

}


// アプリケーションが属するポイントパッケージにはエントリーポイントがある為、GOはどこから実行を開始するかを知っている



// *************************************
// GOのプログラムは、パッケージでまとめられている
//
// また、GOは基本的なライブラリ、組み込みパッケージが含まれている
// 例)
// ❐fmtパッケージ
//  -- 〇〇.go
//  -- △△.go
//  -- ◇◇.go
//
// GOが提供している基本ライブラリ
// https://pkg.go.dev/std
// *************************************



// ☆☆☆　GOの実行　☆☆☆
// go run ファイル名
//
// 例) go run tutorial.go
// ☆☆☆☆☆☆☆☆☆☆☆☆






