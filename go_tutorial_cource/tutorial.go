package tutorial

import (
	"fmt"
)


// GOが普及した背景
// マルチコアプロセッサの普及
// クラウドインフラストラクチャの使用による何百、何千ものサーバー
// これらにより、複数のプロセッサを導入するアプリケーションは普遍的になった為、インフラストラクチャの拡張性が大幅に向上
// ダイナミックでより多くの容量がある

// つまり、ハードの機能が良くなったので、複数のタスクを『同時並行』でこなせればより効率が上がる

// ❐❐　マルチスレッドの概念　❐❐
// スレッドは基本的に一つのタスクを処理する

// ☆☆☆☆☆☆☆☆☆☆☆☆
// GOはマルチスレッドの同時書き込みを可能に
// それが『go routin』

// また、GOは、保守しやすく、読みやすく、拡張しやすい
// GOのアプリケーションは非常に高速に構築できる
// 起動も非常に速い
// 実行するCPUやRAM等の使用するリソースが少ない（効率的である）
// ☆☆☆☆☆☆☆☆☆☆☆☆




// GOの導入
// 1.goコンパイラが必要
// 2.IDE等の統合環境
